/* mdl2pdb.c
 * Molecular Chemistry Package
 * Roger Sayle, September 1995
 * Version 1.2
 */
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#define CHEMMOL
#include "chemmol.h"
#include "molecule.h"
#include "element.h"
#include "mdlfile.h"
#include "smiles.h"

#define BitN      0x0001
#define BitNTer   0x0002
#define BitNPro   0x0004
#define BitNPT    0x0008
#define BitCA     0x0010
#define BitCAGly  0x0020
#define BitC      0x0100
#define BitCTer   0x0200
#define BitCOXT   0x0400
#define BitO      0x1000
#define BitOXT    0x2000

#define BitNAll   0x000F
#define BitCAAll  0x0030
#define BitCAll   0x0700
#define BitOAll   0x3000

typedef struct {
    int flag;
    short elem, count;
    int n1, n2, n3;
        } Template;

#define MAXPEPTIDE  11
static Template Peptide[MAXPEPTIDE] = {
    /* N     */    {  0x0001, 7, 2, 0x0030, 0x0100,      0 },
    /* NTer  */    {  0x0002, 7, 1, 0x0030,      0,      0 },
    /* NPro  */    {  0x0004, 7, 3, 0x0030, 0x0100,     -6 },
    /* NPT   */    {  0x0008, 7, 2, 0x0030,     -6,      0 },
    /* CA    */    {  0x0010, 6, 3, 0x000F, 0x0700,     -6 },
    /* CAGly */    {  0x0020, 6, 2, 0x0003, 0x0700,      0 },
    /* C     */    {  0x0100, 6, 3, 0x0030, 0x1000, 0x0005 },
    /* CTer  */    {  0x0200, 6, 2, 0x0030, 0x1000,      0 },
    /* COXT  */    {  0x0400, 6, 3, 0x0030, 0x1000, 0x2000 },
    /* O     */    {  0x1000, 8, 1, 0x0700,      0,      0 },
    /* OXT   */    {  0x2000, 8, 1, 0x0400,      0,      0 }
        };


#define ATOMMAX   38
static char AtomName[ATOMMAX][4] = {
    /*  0 */  { ' ', 'N', ' ', ' ' },
    /*  1 */  { ' ', 'C', 'A', ' ' },
    /*  2 */  { ' ', 'C', ' ', ' ' },
    /*  3 */  { ' ', 'O', ' ', ' ' },
    /*  4 */  { ' ', 'C', 'B', ' ' },
    /*  5 */  { ' ', 'S', 'G', ' ' },
    /*  6 */  { ' ', 'O', 'G', ' ' },
    /*  7 */  { ' ', 'C', 'G', ' ' },
    /*  8 */  { ' ', 'O', 'G', '1' },
    /*  9 */  { ' ', 'C', 'G', '1' },
    /* 10 */  { ' ', 'C', 'G', '2' },
    /* 11 */  { ' ', 'C', 'D', ' ' },
    /* 12 */  { ' ', 'O', 'D', ' ' },
    /* 13 */  { ' ', 'S', 'D', ' ' },
    /* 14 */  { ' ', 'C', 'D', '1' },
    /* 15 */  { ' ', 'O', 'D', '1' },
    /* 16 */  { ' ', 'N', 'D', '1' },
    /* 17 */  { ' ', 'C', 'D', '2' },
    /* 18 */  { ' ', 'O', 'D', '2' },
    /* 19 */  { ' ', 'N', 'D', '2' },
    /* 20 */  { ' ', 'C', 'E', ' ' },
    /* 21 */  { ' ', 'N', 'E', ' ' },
    /* 22 */  { ' ', 'C', 'E', '1' },
    /* 23 */  { ' ', 'O', 'E', '1' },
    /* 24 */  { ' ', 'N', 'E', '1' },
    /* 25 */  { ' ', 'C', 'E', '2' },
    /* 26 */  { ' ', 'O', 'E', '2' },
    /* 27 */  { ' ', 'N', 'E', '2' },
    /* 28 */  { ' ', 'C', 'E', '3' },
    /* 29 */  { ' ', 'C', 'Z', ' ' },
    /* 30 */  { ' ', 'N', 'Z', ' ' },
    /* 31 */  { ' ', 'C', 'Z', '2' },
    /* 32 */  { ' ', 'C', 'Z', '3' },
    /* 33 */  { ' ', 'O', 'H', ' ' },
    /* 34 */  { ' ', 'N', 'H', '1' },
    /* 35 */  { ' ', 'N', 'H', '2' },
    /* 36 */  { ' ', 'C', 'H', '2' },
    /* 37 */  { ' ', 'O', 'X', 'T' }
        };

static char ResName[24][4] = {
    /*  0 */ "UNK",
    /*  1 */ "ALA",
    /*  2 */ "ARG",
    /*  3 */ "ASN",
    /*  4 */ "ASP",
    /*  5 */ "CYS",
    /*  6 */ "GLU",
    /*  7 */ "GLN",
    /*  8 */ "GLY",
    /*  9 */ "HIS",
    /* 10 */ "ILE",
    /* 11 */ "LEU",
    /* 12 */ "LYS",
    /* 13 */ "MET",
    /* 14 */ "PHE",
    /* 15 */ "PRO",
    /* 16 */ "SER",
    /* 17 */ "THR",
    /* 18 */ "TRP",
    /* 19 */ "TYR",
    /* 20 */ "VAL",
    /* 21 */ "HOH",
    /* 22 */ "LIG",
    /* 23 */ "HYP"
        };

static int BitMask[MaxAtom];
static int HetaFlag[MaxAtom];
static int AtomID[MaxAtom];
static int ResNo[MaxAtom];
static int ResID[MaxAtom];
static char Chain[MaxAtom];
static int ChainCount;

static Molecule MainMol;
static char Buffer[BUFMAX];

static char *molname;
static char *outname;


int ReadLine( fp, buffer )
    FILE *fp;  char *buffer;
{
    register char *ptr;
    register int ch;

    if( feof(fp) )
            return( False );

    ptr = buffer;
    do {
        ch = getc(fp);
        if( ch == '\n' )
        {   *ptr = '\0';
            return( True );
        } else if( ch == '\r' )
        {   ch = getc(fp);
            if( ch != '\n' )
               ungetc(ch,fp);
            *ptr = '\0';
            return( True );
        } else if( ch == EOF )
        {   *ptr = '\0';
            return( ptr != buffer );
        } else *ptr++ = ch;
    } while( ptr < buffer+(BUFMAX-1) );

    /* skip to the end of the line! */
    do { ch = getc(fp);
    } while( (ch!='\n') && (ch!='\r') && (ch!=EOF) );

    if( ch == '\r' )
    {   ch = getc(fp);
        if( ch != '\n' )
            ungetc(ch,fp);
    }
    *ptr = 0;
    return( True );
}


static int BondCount( mol, i )
    Molecule *mol;  int i;
{
    register Atom *atom;
    register int count;
    register int j;

    count = 0;
    for( j=0; j<mol->bcount; j++ )
        if( mol->bond[j].src == i )
        {   atom = &mol->atom[mol->bond[j].dst];
            if( atom->elem > 1 ) count++;
        } else if( mol->bond[j].dst == i )
        {   atom = &mol->atom[mol->bond[j].src];
            if( atom->elem > 1 ) count++;
        }
    return( count );
}


static void DetermineHetAtoms( mol )
    Molecule *mol;
{
    register int i;

    for( i=0; i<mol->acount; i++ )
        if( mol->atom[i].elem > 1 )
        {   if( !BondCount(mol,i) )
            {   HetaFlag[i] = True;
                if( mol->atom[i].elem == 8 )
                {   ResID[i] = 21;
                } else ResID[i] = 22;
            } else HetaFlag[i] = False;
        }
}


static int RecurseChain( mol, i, c )
    Molecule *mol;  int i,c;
{
    register int result;
    register int j;

    result = 1;
    Chain[i] = c;
    for( j=0; j<mol->bcount; j++ )
    {    if( mol->bond[j].src == i )
         {   if( Chain[mol->bond[j].dst]==' ' )
                 result += RecurseChain(mol,mol->bond[j].dst,c);
         } else if( mol->bond[j].dst == i )
             if( Chain[mol->bond[j].src]==' ' )
                 result += RecurseChain(mol,mol->bond[j].src,c);
    }
    return( result );
}


static void DetermineConnectedChains( mol )
    Molecule *mol;
{
    register int count;
    register int size;
    register int i,j;

    count = 0;
    for( i=0; i<mol->acount; i++ )
        if( !HetaFlag[i] && (Chain[i]==' ') )
        {   size = RecurseChain(mol,i,'A'+count);
            if( size < 10 )
            {   for( j=0; j<mol->acount; j++ )
                    if( Chain[j] == ('A'+count) )
                    {   HetaFlag[j] = True;
                        Chain[j] = ' ';
                        ResID[j] = 22;
                    }
            } else count++;
        }

    if( count == 1 )
    {   for( i=0; i<mol->acount; i++ )
            Chain[i] = ' ';
        fputs("1 biopolymer chain\n",stderr);
    } else fprintf(stderr,"%d biopolymer chains\n",count);
    ChainCount = count;
}


static int MatchConstraint( mol, i, mask )
    Molecule *mol;   int i, mask;
{
    if( mask < 0 )
    {   return( mol->atom[i].elem == -mask );
    } else return( BitMask[i] & mask );
}


static int MatchConstraints( mol, pep, na, nb, nc )
    Molecule *mol;  Template *pep;  int na, nb, nc;
{
    return( MatchConstraint(mol,na,pep->n1) &&
            MatchConstraint(mol,nb,pep->n2) &&
            MatchConstraint(mol,nc,pep->n3) );
}


static void ConstrainPeptides( mol )
    Molecule *mol;
{
    static int neighbour[4];
    register Template *pep;
    register int orig,change;
    register int na,nb,nc;
    register Atom *atom;
    register int count;
    register int i,j;

    /* First Pass */
    for( i=0; i<mol->acount; i++ )
    {   atom = &mol->atom[i];
        count = BondCount(mol,i);
        BitMask[i] = 0;

        for( j=0; j<MAXPEPTIDE; j++ )
            if( (Peptide[j].elem==atom->elem) && (Peptide[j].count==count) )
                BitMask[i] |= Peptide[j].flag;
    }

    /* Second Pass */
    do {
        change = False;

        for( i=0; i<mol->acount; i++ )
            if( BitMask[i] )
            {   /* Determine Neighbours */
                count = 0;
                for( j=0; j<mol->bcount; j++ )
                     if( mol->bond[j].src == i )
                     {   atom = &mol->atom[mol->bond[j].dst];
                         if( atom->elem > 1 ) 
                             neighbour[count++] = mol->bond[j].dst;
                     } else if( mol->bond[j].dst == i )
                     {   atom = &mol->atom[mol->bond[j].src];
                         if( atom->elem > 1 )
                             neighbour[count++] = mol->bond[j].src;
                     }

                na = neighbour[0];
                nb = neighbour[1];
                nc = neighbour[2];

                orig = BitMask[i];
                for( j=0; j<MAXPEPTIDE; j++ )
                {   pep = &Peptide[j];
                    if( pep->flag & BitMask[i] )
                    {   if( count == 3 )
                        {   if( !MatchConstraints(mol,pep,na,nb,nc) &&
                                !MatchConstraints(mol,pep,na,nc,nb) &&
                                !MatchConstraints(mol,pep,nb,na,nc) &&
                                !MatchConstraints(mol,pep,nb,nc,na) &&
                                !MatchConstraints(mol,pep,nc,na,nb) &&
                                !MatchConstraints(mol,pep,nc,nb,na) )
                                BitMask[i] &= ~pep->flag;
                        } else if( count == 2 )
                        {   if( !(MatchConstraint(mol,na,pep->n1) &&
                                  MatchConstraint(mol,nb,pep->n2)) &&
                                !(MatchConstraint(mol,nb,pep->n1) &&
                                  MatchConstraint(mol,na,pep->n2)) )
                                BitMask[i] &= ~pep->flag;
                        } else if( count == 1 )
                        {   if( !MatchConstraint(mol,na,pep->n1) )
                                BitMask[i] &= ~pep->flag;
                        }
                    }
                }

                if( BitMask[i] != orig )
                    change = True;
            }
    } while( change );
}


static int TracePeptideChain( mol, i, r )
    Molecule *mol;  int i,r;
{
    auto int neighbour[4];
    register Atom *atom;
    register int na,nb,nc;
    register int count;
    register int j,k;

    ResNo[i] = r;

    /* Determine Neighbours */
    count = 0;
    for( j=0; j<mol->bcount; j++ )
        if( mol->bond[j].src == i )
        {   atom = &mol->atom[mol->bond[j].dst];
            if( atom->elem > 1 ) 
                neighbour[count++] = mol->bond[j].dst;
        } else if( mol->bond[j].dst == i )
        {   atom = &mol->atom[mol->bond[j].src];
            if( atom->elem > 1 )
                neighbour[count++] = mol->bond[j].src;
        }

    na = neighbour[0];
    nb = neighbour[1];
    nc = neighbour[2];

    switch( AtomID[i] )
    {   case(0):   for( j=0; j<count; j++ )
                       if( BitMask[neighbour[j]] & BitCAAll )
                       {   AtomID[neighbour[j]] = 1;
                           TracePeptideChain(mol,neighbour[j],r);
                       }
                   break;

        case(1):  if( count == 3 )
                  {   if( BitMask[na] & BitNAll )
                      {   na = nc;
                      } else if( BitMask[nb] & BitNAll )
                          nb = nc;

                      if( BitMask[na] & BitC )
                      {   j = na;  k = nb;
                      } else if( BitMask[nb] & BitC )
                      {   j = nb;  k = na;
                      } else if( BitMask[na] & BitCAll )
                      {   j = na;  k = nb;
                      } else /* BitMask[nb] & BitCAll */
                      {   j = nb;  k = na;
                      }

                      AtomID[j] = 2;
                      AtomID[k] = 4; ResNo[k] = r;
                      TracePeptideChain(mol,j,r);

                  } else /* count == 2 */
                  {   if( BitMask[na] & BitCAll )
                      {   AtomID[na] = 2;
                          TracePeptideChain(mol,na,r);
                      } else 
                      {   AtomID[nb] = 2;
                          TracePeptideChain(mol,nb,r);
                      }
                  }
                  break;

        case(2):  k = 3;
                  for( j=0; j<count; j++ )
                       if( BitMask[neighbour[j]] & BitNAll )
                       {   AtomID[neighbour[j]] = 0;
                           TracePeptideChain(mol,neighbour[j],r+1);
                       } else if( BitMask[neighbour[j]] & BitOAll )
                       {   AtomID[neighbour[j]] = k;
                           ResNo[neighbour[j]] = r;
                           k = ATOMMAX-1;  /* OXT */
                       }
                   break;
    }
}


static void DeterminePeptideBackbone( mol )
    Molecule *mol;
{
    register Atom *atom;
    register int count;
    register int i,j;

    ConstrainPeptides( mol );
        
    count = 0;
    for( i=0; i<mol->acount; i++ )
        if( BitMask[i]&BitCAAll ) count++;
    fprintf(stderr,"%d alpha carbons\n",count);

    /* OrderPeptideBackbone */
    for( i=0; i<mol->acount; i++ )
        if( AtomID[i] == -1 )
            if( BitMask[i] & BitNTer )
            {   AtomID[i] = 0;
                TracePeptideChain(mol,i,1);
            } else if( (BitMask[i]&BitNPT) && !(BitMask[i]&BitN) )
            {   AtomID[i] = 0;
                TracePeptideChain(mol,i,1);
            }

    /* Carbonyl Double Bond */
    for( i=0; i<mol->bcount; i++ )
        if( (AtomID[mol->bond[i].src]==2) && 
            (AtomID[mol->bond[i].dst]==3) )
        {   mol->bond[i].flag |= BF_DOUBLE;
        } else if( (AtomID[mol->bond[i].src]==3) && 
                   (AtomID[mol->bond[i].dst]==2) )
            mol->bond[i].flag |= BF_DOUBLE;
}


static void AssignAminoAcid( mol, r, c, i )
    Molecule *mol;  int r, c, i;
{
    register int j;

    for( j=0; j<mol->acount; j++ )
        if( (ResNo[j]==r) && (Chain[j]==c) )
            ResID[j] = i;
}


static int IsTerminal( mol, i, p )
    Molecule *mol;  int i,p;
{
    register Atom *atom;
    register int result;
    register int j,k;

    result = -1;
    for( j=0; j<mol->bcount; j++ )
        if( mol->bond[j].src == i )
        {   k = mol->bond[j].dst;
            atom = &mol->atom[k];
            if( (atom->elem>1) && (AtomID[k]!=p) ) 
            {   if( result != -1 )
                {   return( -1 );
                } else result = k;
            }
        } else if( mol->bond[j].dst == i )
        {   k = mol->bond[j].src;
            atom = &mol->atom[k];
            if( (atom->elem>1) && (AtomID[k]!=p) )
            {   if( result != -1 )
                {   return( -1 );
                } else result = k;
            }
        }
    return( result );
}


static int IdentifyAminoCZ( mol, i )
    Molecule *mol;  int i;
{
    static int neighbour[4];
    register Atom *atom;
    register int count;
    register int na,nb;
    register int j,k;

    /* Determine Neighbours */
    count = 0;
    for( j=0; j<mol->bcount; j++ )
        if( mol->bond[j].src == i )
        {   k = mol->bond[j].dst;
            atom = &mol->atom[k];
            if( (atom->elem>1) && (AtomID[k]!=21) ) 
            {   neighbour[count++] = k;
                ResNo[k] = ResNo[i];
            }
        } else if( mol->bond[j].dst == i )
        {   k = mol->bond[j].src;
            atom = &mol->atom[k];
            if( (atom->elem>1) && (AtomID[k]!=21) )
            {   neighbour[count++] = k;
                ResNo[k] = ResNo[i];
            }
        }

    na = neighbour[0];
    nb = neighbour[1];

    if( count == 2 )
    {   if( (mol->atom[na].elem==7) && (mol->atom[nb].elem==7) )
        {   /* Arginine */
            AtomID[na] = 34;
            AtomID[nb] = 35;
            return( 2 );
        }
    }
    return 0;
}


static int IdentifyAminoCD( mol, i )
    Molecule *mol;  int i;
{
    static int neighbour[4];
    register Atom *atom;
    register int count;
    register int na,nb;
    register int j,k;

    /* Determine Neighbours */
    count = 0;
    for( j=0; j<mol->bcount; j++ )
        if( mol->bond[j].src == i )
        {   k = mol->bond[j].dst;
            atom = &mol->atom[k];
            if( (atom->elem>1) && (AtomID[k]!=7) ) 
            {   neighbour[count++] = k;
                ResNo[k] = ResNo[i];
            }
        } else if( mol->bond[j].dst == i )
        {   k = mol->bond[j].src;
            atom = &mol->atom[k];
            if( (atom->elem>1) && (AtomID[k]!=7) )
            {   neighbour[count++] = k;
                ResNo[k] = ResNo[i];
            }
        }

    na = neighbour[0];
    nb = neighbour[1];

    if( count == 2 )
    {   if( (mol->atom[na].elem==8) && (mol->atom[nb].elem==8) )
        {   /* Glutamic Acid */
            AtomID[na] = 23;
            AtomID[nb] = 26;
            return( 6 );
        }

        /* Glutamine */
        if( (mol->atom[na].elem==8) && (mol->atom[nb].elem==7) )
        {   AtomID[na] = 23;
            AtomID[nb] = 27;
            return( 7 );
        } else if( (mol->atom[na].elem==7) && (mol->atom[nb].elem==8) )
        {   AtomID[na] = 27;
            AtomID[nb] = 23;
            return( 7 );
        }

    } else if( count == 1 )
    {   if( mol->atom[na].elem == 7 )
        {   /* Arginine */
            AtomID[na] = 21;
            if( (k=IsTerminal(mol,na,11)) != -1 )
            {   ResNo[k] = ResNo[i];
                if( mol->atom[k].elem != 6 )
                    return( 0 );
                AtomID[k] = 29;
                return( IdentifyAminoCZ(mol,k) );
            }
        } else if( mol->atom[na].elem == 6 )
        {   AtomID[na] = 20;
            if( (k=IsTerminal(mol,na,11)) != -1 )
            {   /* Lysine */
                ResNo[k] = ResNo[i];
                if( mol->atom[k].elem == 7 )
                {   AtomID[k] = 30;
                    return( 12 );
                }
            }
        }
    }
    return 0;
}


static int IsHistidine( mol, cd, nd )
    Molecule *mol;  int cd,nd;
{
    register int ce,ne;
    register int i,j;

    AtomID[nd] = 16;
    AtomID[cd] = 17;

    ce = IsTerminal(mol,nd,7);
    ne = IsTerminal(mol,cd,7);
    if( (ce==-1) || (ne==-1) )
        return( False );

    ResNo[ce] = ResNo[nd];
    ResNo[ne] = ResNo[cd];

    /* Correct Elements? */
    if( mol->atom[ce].elem != 6 ) return( False );
    if( mol->atom[ne].elem != 7 ) return( False );

    /* Ring Closure */
    if( IsTerminal(mol,ce,16) != ne ) return( False );
    if( IsTerminal(mol,ne,17) != ce ) return( False );

    AtomID[ce] = 22;
    AtomID[ne] = 27;
    return( True );
}


static int IsTyrosine( mol, cd1, cd2 )
    Molecule *mol;  int cd1, cd2;
{
    static int neighbour[4];
    register int ce1,ce2,cz;
    register int i,j,other;

    AtomID[cd1] = 14;
    AtomID[cd2] = 17;

    ce1 = IsTerminal(mol,cd1,7);
    ce2 = IsTerminal(mol,cd2,7);
    if( (ce1==-1) || (ce2==-1) )
        return( False );

    ResNo[ce1] = ResNo[cd1];
    ResNo[ce2] = ResNo[cd2];

    /* Correct Elements? */
    if( mol->atom[ce1].elem != 6 ) return( False );
    if( mol->atom[ce1].elem != 6 ) return( False );

    AtomID[ce1] = 22;
    AtomID[ce2] = 25;

    cz = IsTerminal(mol,ce1,14);
    if( (cz==-1) || (mol->atom[cz].elem!=6) )
        return( False );
    if( IsTerminal(mol,ce2,17) != cz )
        return( False );

    /* Phenylalanine */
    ResNo[cz] = ResNo[ce1];
    AtomID[cz] = 29;

    other = -1;
    for( i=0; i<mol->bcount; i++ )
    {   if( mol->bond[i].src == cz )
        {   j = mol->bond[i].dst;
            if( (j!=ce1) && (j!=ce2) && (mol->atom[j].elem>1) )
            {   if( other != -1 )
                {   return( 14 );
                } else other = j;
            }
        } else if( mol->bond[i].dst == cz )
        {   j = mol->bond[i].src;
            if( (j!=ce1) && (j!=ce2) && (mol->atom[j].elem>1) )
            {   if( other != -1 )
                {   return( 14 );
                } else other = j;
            }
        }
    }

    if( (other==-1) || (mol->atom[other].elem!=8) )
        return( 14 );

    /* Tyrosine */
    ResNo[other] = ResNo[cz];
    AtomID[other] = 33;
    return( 19 );
}


static int IsTryptophan( mol, cd1, cd2 )
    Molecule *mol;  int cd1, cd2;
{
    static int neighbour[4];
    register Atom *atom;
    register int ce3,cz2,cz3,ch2;
    register int ne1,ce2;
    register int na,nb;
    register int count;
    register int i,j;

    AtomID[cd1] = 14;
    AtomID[cd2] = 17;

    ne1 = IsTerminal(mol,cd1,7);
    if( (ne1==-1) || (mol->atom[ne1].elem!=7) )
        return( False );

    AtomID[ne1] = 24;
    ResNo[ne1] = ResNo[cd1];

    ce2 = IsTerminal(mol,ne1,14);
    if( (ce2==-1) || (mol->atom[ce2].elem!=6) )
        return( False );

    /* Determine Neighbours */
    count = 0;
    for( i=0; i<mol->bcount; i++ )
        if( mol->bond[i].src == cd2 )
        {   j = mol->bond[i].dst;
            atom = &mol->atom[j];
            if( (atom->elem>1) && (AtomID[j]!=7) ) 
            {   neighbour[count++] = j;
                ResNo[j] = ResNo[cd2];
            }
        } else if( mol->bond[i].dst == cd2 )
        {   j = mol->bond[i].src;
            atom = &mol->atom[j];
            if( (atom->elem>1) && (AtomID[j]!=7) )
            {   neighbour[count++] = j;
                ResNo[j] = ResNo[cd2];
            }
        }

    if( count != 2 )
        return( False );

    na = neighbour[0];
    nb = neighbour[1];

    /* Ring Closure #1! */
    if( (na!=ce2) && (nb!=ce2) )
        return( False );

    AtomID[ce2] = 25;
    ResNo[ce2] = ResNo[cd2];

    ce3 = (na==ce2)? nb : na;
    if( mol->atom[ce3].elem != 6 )
        return( False );

    AtomID[ce3] = 28;
    ResNo[ce3] = ResNo[cd2];

    cz3 = IsTerminal(mol,ce3,17);
    if( (cz3==-1) || (mol->atom[cz3].elem!=6) )
        return( False );

    AtomID[cz3] = 32;
    ResNo[cz3] = ResNo[ce3];

    ch2 = IsTerminal(mol,cz3,28);
    if( (ch2==-1) || (mol->atom[ch2].elem!=6) )
        return( False );

    AtomID[ch2] = 36;
    ResNo[ch2] = ResNo[cz3];

    cz2 = IsTerminal(mol,ch2,32);
    if( (cz2==-1) || (mol->atom[cz2].elem!=6) )
        return( False );

    AtomID[cz2] = 31;
    ResNo[cz2] = ResNo[ch2];

    /* Ring Closure #2 */
    if( IsTerminal(mol,cz2,36) != ce2 )
        return( False );

    return( True );
}


static int IdentifyAminoCG( mol, i )
    Molecule *mol;  int i;
{
    static int neighbour[4];
    register Atom *atom;
    register int count;
    register int na,nb;
    register int j,k;

    /* Determine Neighbours */
    count = 0;
    for( j=0; j<mol->bcount; j++ )
        if( mol->bond[j].src == i )
        {   k = mol->bond[j].dst;
            atom = &mol->atom[k];
            if( (atom->elem>1) && (AtomID[k]!=4) ) 
            {   neighbour[count++] = k;
                ResNo[k] = ResNo[i];
            }
        } else if( mol->bond[j].dst == i )
        {   k = mol->bond[j].src;
            atom = &mol->atom[k];
            if( (atom->elem>1) && (AtomID[k]!=4) )
            {   neighbour[count++] = k;
                ResNo[k] = ResNo[i];
            }
        }

    na = neighbour[0];
    nb = neighbour[1];

    if( count == 2 )
    {   if( (mol->atom[na].elem==8) && (mol->atom[nb].elem==8) )
        {   /* Aspartic Acid */
            AtomID[na] = 15;
            AtomID[nb] = 18;
            return( 4 );
        }

        /* Asparagine */
        if( (mol->atom[na].elem==8) && (mol->atom[nb].elem==7) )
        {   AtomID[na] = 15;
            AtomID[nb] = 19;
            return( 3 );
        } else if( (mol->atom[na].elem==7) && (mol->atom[nb].elem==8) )
        {   AtomID[na] = 19;
            AtomID[nb] = 15;
            return( 3 );
        }

        /* Hydroxyproline */
        if( (mol->atom[na].elem==6) && (mol->atom[nb].elem==8) )
        {   if( (k=IsTerminal(mol,na,7)) != -1 )
            {   if( AtomID[k] == 0 )
                {   AtomID[na] = 11;
                    AtomID[nb] = 12;
                    return( 23 );
                }
            }
            return( 0 );
        } else if( (mol->atom[na].elem==8) && (mol->atom[nb].elem==6) )
        {   if( (k=IsTerminal(mol,nb,7)) != -1 )
            {   if( AtomID[k] == 0 )
                {   AtomID[na] = 12;
                    AtomID[nb] = 11;
                    return( 23 );
                }
            }
            return( 0 );
        }

        /* Histidine */
        if( (mol->atom[na].elem==6) && (mol->atom[nb].elem==7) )
        {   return( IsHistidine(mol,na,nb)? 9 : 0 );
        } else if( (mol->atom[na].elem==7) && (mol->atom[nb].elem==6) )
            return( IsHistidine(mol,nb,na)? 9 : 0 );


        if( (mol->atom[na].elem!=6) || (mol->atom[nb].elem!=6) )
            return 0;  /* Unknown */

        if( BondCount(mol,na) == 3 )
        {   if( IsTryptophan(mol,nb,na) )
                return( 18 );
        } else if( BondCount(mol,nb) == 3 )
        {   if( IsTryptophan(mol,na,nb) )
                return( 18 );
        } else if( k = IsTyrosine(mol,na,nb) )
            return( k );

        /* Leucine */
        AtomID[na] = 14;  AtomID[nb] = 17;
        return( 11 );

    } else if( count == 1 )
    {   if( mol->atom[na].elem == 16 )
        {   /* Methionine */
            if( (k=IsTerminal(mol,na,7)) != -1 )
            {   if( mol->atom[k].elem != 6 ) return( 0 );
                AtomID[na] = 13; AtomID[k] = 20;
                ResNo[k] = ResNo[i];
                return( 13 );
            }
        } else if( mol->atom[na].elem == 6 )
        {   AtomID[na] = 11;
            if( (k=IsTerminal(mol,na,7)) != -1 )
            {   if( AtomID[k] == 0 )
                {   /* Proline */
                    return( 15 );
                }
            }
            AtomID[na] = 11;
            return( IdentifyAminoCD(mol,na) );
        }
    }
    return 0;
}


static int IdentifyAminoAcid( mol, i )
    Molecule *mol;  int i;
{
    static int neighbour[4];
    register Atom *atom;
    register int count;
    register int na,nb;
    register int j,k;

    /* Determine Neighbours */
    count = 0;
    for( j=0; j<mol->bcount; j++ )
        if( mol->bond[j].src == i )
        {   k = mol->bond[j].dst;
            atom = &mol->atom[k];
            if( (atom->elem>1) && (AtomID[k]!=1) ) 
            {   neighbour[count++] = k;
                ResNo[k] = ResNo[i];
            }
        } else if( mol->bond[j].dst == i )
        {   k = mol->bond[j].src;
            atom = &mol->atom[k];
            if( (atom->elem>1) && (AtomID[k]!=1) )
            {   neighbour[count++] = k;
                ResNo[k] = ResNo[i];
            }
        }

    na = neighbour[0];
    nb = neighbour[1];

    if( count == 2 )
    {   if( mol->atom[na].elem == 8 )
        {   /* Threonine */
            AtomID[na] = 8;  AtomID[nb] = 10;
            return( 17 );
        } else if( mol->atom[nb].elem == 8 )
        {   /* Threonine */
            AtomID[na] = 10;  AtomID[nb] = 8;
            return( 17 );
        }

        if( (mol->atom[na].elem!=6) || (mol->atom[nb].elem!=6) )
            return 0;  /* Unknown */

        /* Isoleucine */
        if( (k=IsTerminal(mol,na,4)) != -1 )
        {   if( mol->atom[k].elem != 6 ) return 0;
            AtomID[na]=9; AtomID[nb]=10; AtomID[k]=14;
            ResNo[k] = ResNo[i];
            return( 10 );
        } else if( (k=IsTerminal(mol,nb,4)) != -1 )
        {   if( mol->atom[k].elem != 6 ) return 0;
            AtomID[na]=10; AtomID[nb]=9; AtomID[k]=14;
            ResNo[k] = ResNo[i];
            return( 10 );
        }

        /* Valine */
        AtomID[na] = 9;  AtomID[nb] = 10;
        return( 20 );

    } else if( count == 1 )
    {   if( mol->atom[na].elem == 16 )
        {   /* Cysteine */
            AtomID[na] = 5;
            return( 5 );
        } else if( mol->atom[na].elem == 8 )
        {   /* Serine */
            AtomID[na] = 6;
            return( 16 );
        } else if( mol->atom[na].elem == 6 )
        {   AtomID[na] = 7;
            return( IdentifyAminoCG(mol,na) );
        }

    } else if( count == 0 )
        /* Alanine */
        return 1;

    return 0;
}


static void DeterminePeptideSidechains( mol )
    Molecule *mol;
{
    register int aa;
    register int i;

    for( i=0; i<mol->acount; i++ )
        if( AtomID[i] == 4 )
        {   aa = IdentifyAminoAcid(mol,i);
            AssignAminoAcid(mol,ResNo[i],Chain[i],aa);
        } else if( AtomID[i] == 1 )
            if( BitMask[i] & BitCAGly )
                AssignAminoAcid(mol,ResNo[i],Chain[i],8);
}


static void DetermineHydrogens( mol )
    Molecule *mol;
{
    register int i,j,k;

    for( i=0; i<mol->acount; i++ )
        mol->atom[i].hcount = 0;

    for( i=0; i<mol->acount; i++ )
        if( mol->atom[i].elem == 1 )
        {   k = -1;
            for( j=0; j<mol->bcount; j++ )
                if( mol->bond[j].src == i )
                {   k = mol->bond[j].dst;
                } else if( mol->bond[j].dst == i )
                {   k = mol->bond[j].src;
                }

            if( k != -1 )
            {   HetaFlag[i] = HetaFlag[k];
                AtomID[i] = AtomID[k];
                ResID[i] = ResID[k];
                ResNo[i] = ResNo[k];

                mol->atom[i].hcount = ++mol->atom[k].hcount;
            }
        }

    for( i=0; i<mol->acount; i++ )
        if( mol->atom[i].elem == 1 )
        {   k = -1;
            for( j=0; j<mol->bcount; j++ )
                if( mol->bond[j].src == i )
                {   k = mol->bond[j].dst;
                } else if( mol->bond[j].dst == i )
                {   k = mol->bond[j].src;
                }

            if( (k!=-1) && (mol->atom[k].hcount==1) )
                mol->atom[i].hcount = 0;
        }
}


static int PDBOrder[MaxAtom];
static Molecule *PDBMol;

int PDBSort( arg1, arg2 )
    int *arg1, *arg2;
{
    register Atom *atom1;
    register Atom *atom2;

    if( HetaFlag[*arg1] != HetaFlag[*arg2] )
       return( HetaFlag[*arg1]? 1 : -1 );

    if( Chain[*arg1] != Chain[*arg2] )
        return( Chain[*arg1] - Chain[*arg2] );

    if( ResNo[*arg1] != ResNo[*arg2] )
        return( ResNo[*arg1] - ResNo[*arg2] );

    atom1 = &PDBMol->atom[*arg1];
    atom2 = &PDBMol->atom[*arg2];

    if( (atom1->elem==1) && (atom2->elem!=1) )
        return( 1 );
    if( (atom1->elem!=1) && (atom2->elem==1) )
        return( -1 );

    if( AtomID[*arg1] != AtomID[*arg2] )
        return( AtomID[*arg1] - AtomID[*arg2] );

    if( (atom1->elem==1) && (atom2->elem==1) )
        return( atom1->hcount - atom2->hcount );
    return( 0 );
}


static void OutputPDBFile( mol, fp )
    Molecule *mol;  FILE *fp;
{
    register char *ptr;
    register int i,j;

    PDBMol = mol;
    for( i=0; i<mol->acount; i++ )
        PDBOrder[i] = i;
    qsort(PDBOrder,mol->acount,sizeof(int),
          (int(*)(const void*,const void*))PDBSort);

    for( j=0; j<mol->acount; j++ )
    {   i = PDBOrder[j];
        if( HetaFlag[i] )
        {   fputs("HETATM ",fp);
        } else fputs("ATOM   ",fp);

        fprintf(fp,"%4d ",j+1);

        if( AtomID[i] == -1 )
        {   ptr = Elem[mol->atom[i].elem].symbol;
            if( ptr[1]!=' ' )
            {   fprintf(fp,"%c%c  ",ptr[0],toupper(ptr[1]));
            } else fprintf(fp," %c  ",ptr[0]);
        } else if( mol->atom[i].elem == 1 )
        {   if( mol->atom[i].hcount )
            {   fputc(mol->atom[i].hcount+'0',fp);
            } else fputc(' ',fp);
            fprintf(fp,"H%.2s",AtomName[AtomID[i]]+2);
        } else fprintf(fp,"%.4s",AtomName[AtomID[i]]);

        fprintf(fp," %s ",ResName[ResID[i]]);
        fprintf(fp,"%c%4d",Chain[i],ResNo[i]);
        fprintf(fp,"    %8.3f%8.3f%8.3f",
            mol->atom[i].x,mol->atom[i].y,mol->atom[i].z);
        fputs("  1.00  0.00\n",fp);
    }
}


static void DisplayUsage()
{
    fputs("usage: mdl2pdb <molfile> [outfile]\n",stderr);
    exit(1);
}


static void InitialiseMol( mol )
    Molecule *mol;
{
    register int i;

    for( i=0; i<mol->acount; i++ )
    {   AtomID[i] = -1;
        Chain[i] = ' ';
        ResID[i] = 0;
        ResNo[i] = 0;
    }
}


static void InitialiseChemMol()
{
    SuperCount = 0;
}


int main( argc, argv )
    int argc; char *argv[];
{
    register char *ptr;
    register FILE *fp;

    fputs("MDL2PDB Chemically Intelligent Parser\n",stderr);
    fputs("Roger Sayle, Glaxo Wellcome Research\n",stderr);
    fputs("Version 1.2, September 1995\n\n",stderr);
    InitialiseChemMol();

    if( argc == 3 )
    {   molname = argv[1];
        outname = argv[2];
    } else if( argc == 2 )
    {   molname = argv[1];
        outname = NULL;
    } else DisplayUsage();


    ReadMDLMolFile(&MainMol,molname);

    if( outname && strcmp(outname,"-") )
    {   if( !(fp = fopen(outname,"w")) )
        {   fprintf(stderr,"Error: Unable to open file '%s'!\n",outname);
            exit(1);
        }
    } else fp = stdout;

    InitialiseMol(&MainMol);
    DetermineHetAtoms(&MainMol);
    DetermineConnectedChains(&MainMol);
    DeterminePeptideBackbone(&MainMol);
    DeterminePeptideSidechains(&MainMol);
    DetermineHydrogens(&MainMol);
    OutputPDBFile(&MainMol,fp);

    /* GenerateSmilesString(&MainMol,stderr); */
    /* fprintf(stderr," %s\n",MolName);       */

    if( fp != stdout )
        fclose(fp);
    return(0);
}
